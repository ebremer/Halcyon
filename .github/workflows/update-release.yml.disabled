name: Update Release

on:
  release:
    types: [published]

jobs:
  update-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the full history is fetched

      - name: Generate release notes
        id: generate_release_notes
        run: |
          # Fetch the latest release
          latest_release=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          release_tag=$(echo $latest_release | jq -r .tag_name)

          echo "Latest release tag: $release_tag"

          # Generate contributors list
          contributors=$(git log --pretty="%an" ${release_tag}..HEAD | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Contributors: $contributors"

          # Generate changelog
          changelog=$(git log --pretty=format:"- %s" ${release_tag}..HEAD | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Changelog: $changelog"

          # Create the release notes
          cat <<EOF > release_notes.md
          ## Latest Release: $release_tag

          ### Contributors
          $contributors

          ### Changes
          $changelog
          EOF

          # Display the generated release notes for debugging
          cat release_notes.md

      - name: Update release with notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.TOKEN }}
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            const releaseId = context.payload.release.id;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: releaseNotes
            });
